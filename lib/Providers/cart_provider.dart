import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../Services/database_helper.dart';
import '../Models/cart_item.dart';
import 'auth_provider.dart';

class CartNotifier extends StateNotifier<AsyncValue<List<CartItem>>> {
  final DatabaseHelper _dbHelper;
  final String? userId;

  CartNotifier(this._dbHelper, this.userId)
      : super(const AsyncValue.loading()) {
    print('Initializing CartNotifier with userId: $userId');
    _fetchCart();
  }

  Future<void> _fetchCart() async {
    if (userId == null) {
      state = const AsyncValue.error('User not logged in', StackTrace.empty);
      return;
    }
    try {
      state = const AsyncValue.loading();
      final items = await _dbHelper.getCartItems(userId!);
      print(
          'Fetched ${items.length} cart items for userId: $userId: ${items.map((i) => 'id=${i.productId}, title=${i.title}').toList()}');
      await _dbHelper.debugCartContents(userId!);
      state = AsyncValue.data(items);
    } catch (e) {
      print('Error fetching cart: $e');
      state = AsyncValue.error(e, StackTrace.current);
    }
  }

  Future<bool> addToCart({
    required String productId,
    required String title,
    required String imagePath,
    required String price,
    required String description,
    int quantity = 1,
  }) async {
    if (userId == null) {
      print('Add to cart failed: User not logged in');
      state = const AsyncValue.error('User not logged in', StackTrace.empty);
      return false;
    }
    if (productId.isEmpty) {
      print('Add to cart failed: Empty productId for title=$title');
      return false;
    }
    try {
      print(
          'Attempting to add to cart: userId=$userId, productId=$productId, title=$title');

      // Check if the item already exists in the cart
      final isInCart = await _dbHelper.isInCart(userId!, productId);

      if (isInCart) {
        // If the item exists, increment its quantity
        final existingItems = await _dbHelper.getCartItems(userId!);
        final existingItem = existingItems.firstWhere(
          (i) => i.productId == productId,
        );
        await _dbHelper.updateCartItemQuantity(
          userId!,
          productId,
          existingItem.quantity + quantity,
        );
        print(
            'Incremented quantity for item: productId=$productId, new quantity=${existingItem.quantity + quantity}');
      } else {
        // If the item doesn't exist, insert it
        final item = CartItem(
          id: 0, // ID will be auto-generated by the database
          userId: userId!,
          productId: productId,
          title: title,
          imagePath: imagePath,
          price: price,
          description: description,
          quantity: quantity,
        );
        await _dbHelper.insertCartItem(item);
        print(
            'Inserted new cart item: userId=$userId, productId=$productId, title=$title');
      }

      // Refresh the cart state
      await _fetchCart();
      return true;
    } catch (e) {
      print(
          'Error adding to cart: productId=$productId, title=$title, error=$e');
      state = AsyncValue.error(e, StackTrace.current);
      return false;
    }
  }

  Future<void> removeFromCart(String productId) async {
    if (userId == null) {
      state = const AsyncValue.error('User not logged in', StackTrace.empty);
      return;
    }
    try {
      print('Removing from cart: userId=$userId, productId=$productId');
      await _dbHelper.deleteCartItem(userId!, productId);
      await _fetchCart();
    } catch (e) {
      print('Error removing from cart: $e');
      state = AsyncValue.error(e, StackTrace.current);
    }
  }

  Future<bool> isInCart(String productId) async {
    if (userId == null) return false;
    final result = await _dbHelper.isInCart(userId!, productId);
    print('Checked isInCart: productId=$productId, result=$result');
    return result;
  }

  Future<void> updateQuantity(String productId, int quantity) async {
    if (userId == null) {
      state = const AsyncValue.error('User not logged in', StackTrace.empty);
      return;
    }
    try {
      print(
          'Updating quantity: userId=$userId, productId=$productId, quantity=$quantity');
      if (quantity <= 0) {
        await _dbHelper.deleteCartItem(userId!, productId);
      } else {
        await _dbHelper.updateCartItemQuantity(userId!, productId, quantity);
      }
      await _fetchCart();
    } catch (e) {
      print('Error updating cart quantity: $e');
      state = AsyncValue.error(e, StackTrace.current);
    }
  }

  Future<void> clearCart() async {
    if (userId == null) {
      state = const AsyncValue.error('User not logged in', StackTrace.empty);
      return;
    }
    try {
      print('Clearing cart for userId=$userId');
      await _dbHelper.clearCart(userId!);
      await _fetchCart();
    } catch (e) {
      print('Error clearing cart: $e');
      state = AsyncValue.error(e, StackTrace.current);
    }
  }
}

final cartProvider =
    StateNotifierProvider<CartNotifier, AsyncValue<List<CartItem>>>((ref) {
  final dbHelper = DatabaseHelper.instance;
  final userId = ref.watch(authProvider).user?.id;
  print('Initializing cartProvider with userId: $userId');
  return CartNotifier(dbHelper, userId);
});
